import os
import pandas as pd
import csv
import random
from pathlib import Path
from pandas.core.common import flatten
random.seed(123)
onstart:
    print("""
░▒▓████████▓▒░▒▓████████▓▒░░▒▓███████▓▒░▒▓████████▓▒░▒▓██████▓▒░  
   ░▒▓█▓▒░   ░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░ 
   ░▒▓█▓▒░   ░▒▓█▓▒░      ░▒▓█▓▒░      ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░ 
   ░▒▓█▓▒░   ░▒▓██████▓▒░  ░▒▓██████▓▒░░▒▓██████▓▒░░▒▓█▓▒░░▒▓█▓▒░ 
   ░▒▓█▓▒░   ░▒▓█▓▒░             ░▒▓█▓▒░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░ 
   ░▒▓█▓▒░   ░▒▓█▓▒░             ░▒▓█▓▒░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░ 
   ░▒▓█▓▒░   ░▒▓████████▓▒░▒▓███████▓▒░░▒▓████████▓▒░▒▓██████▓▒░  
                                                      ░▒▓█▓▒░     
                                                       ░▒▓██▓▒░
    """)
onsuccess:
    print("TE-Seq pipeline finished successfully!")


configfile: "conf/config.yaml"

final_input = []
for pipeline in config["pipelines_to_deploy"]:
    if pipeline == "aref":
        module aref:
            snakefile: "aref/snakefile"
            config: config
        if config["aref"]["symlink_aref"]["response"] == "yes":
            use rule sym_link from aref as aref_*
            final_input.append("aref.done.outfile")
        else:
            final_input.append("aref.done.outfile")
            if config["aref"]["run_repeatmasker"]["response"] == "no":
                if config["aref"]["update_ref_with_tldr"]["response"] == "yes":
                    if config["aref"]["update_ref_with_tldr"]["per_sample"] == "yes":
                        use rule * from aref exclude sym_link,merge_rm_out_wholegenome,tldr_aggregate_multiple_samples,merge_bams_when_per_sample_is_no_for_ldna_variants as aref_*
                    else: 
                        use rule * from aref exclude sym_link,copy_starting_reference,merge_rm_out_wholegenome,move_starting_reference,tldr_per_sample,get_repeatmasker_raw,process_gtf as aref_*
                else:
                    use rule * from aref exclude sym_link,multiqc,merge_rm_out_wholegenome,dorado,dorado_seqsummary,pycoQC,process_gtf_tldr,cleanup_updated_ref, cleanup_updated_sample_ref,cleanup_updated_ref_and_patch, cleanup_updated_sample_ref_and_patch, repeatmasker,getGtfs,merge_vcfs as aref_*
            else:
                if config["aref"]["update_ref_with_tldr"]["response"] == "yes":
                    if config["aref"]["update_ref_with_tldr"]["per_sample"] == "yes":
                        use rule * from aref exclude sym_link,get_repeatmasker_raw_out,tldr_aggregate_multiple_samples,merge_bams_when_per_sample_is_no_for_ldna_variants as aref_*
                    else: 
                        use rule * from aref exclude sym_link,copy_starting_reference,get_repeatmasker_raw_out,move_starting_reference,tldr_per_sample,get_repeatmasker_raw,process_gtf as aref_*
                else:
                    use rule * from aref exclude sym_link,multiqc,get_repeatmasker_raw_out,dorado,dorado_seqsummary,pycoQC,process_gtf_tldr,cleanup_updated_ref,cleanup_updated_sample_ref,cleanup_updated_ref_and_patch, cleanup_updated_sample_ref_and_patch, repeatmasker,getGtfs,merge_vcfs as aref_*
    
    if pipeline == "ldna":
        module ldna:
            snakefile: "ldna/snakefile"
            config: config
        if config["ldna"]["use_aref_basecalls"] == "yes":
            use rule * from ldna exclude dorado,dorado_seqsummary,pycoQC as ldna_*
        else:
            use rule * from ldna exclude align_to_updated_ref as ldna_*
            tldr_analysis_per_sample = expand("ldna/tldr/{sample}.table.txt", sample = config["ldna"]["samples"])
            pycoQC = expand("ldna/qc/{sample}/{sample}pycoQC.html", sample = config["ldna"]["samples"])
            final_input.append(list(flatten([tldr_analysis_per_sample, pycoQC])))
        mycoplasma = expand("ldna/qc/mycoplasma/mycoplasma{sample}.bam", sample = config["ldna"]["samples"])
        multiqc = "ldna/qc/multiqc_report.html"
        dmrs = "ldna/results/tables/dmrs.CG_m.tsv",
        haplo_bam = expand("ldna/intermediates/{sample_or_ref}/alignments/{rate}/{ref_genome}/{sample_or_ref}.{type}.{modification_string}.sorted.filtered.haplotagged.bam", ref_genome = "analysis_default", sample_or_ref = config["ldna"]["samples"], rate = config["ldna"]["rate"], type = config["ldna"]["type"], modification_string = config["ldna"]["modification_string"])
        bedmethanalysis = "ldna/results/plots/bedmethylanalysis.rds"
        bedmethanalysis_single_sample = "ldna/outfiles/bedmethylanalysis_single_sample.txt"
        sniffles = expand("ldna/intermediates/{sample}/sniffles/sniffles.vcf", sample = config["ldna"]["samples"])
        clair3 = expand("ldna/intermediates/{sample}/clair3/full_alignment.vcf.gz", sample = config["ldna"]["samples"])
        methylartist = "ldna/results/plots/methylartist/locus/methylartistlocusplot_loci_of_interest.outfile"
        hg38pat = expand("ldna/results/wgbs/hg38/{sample}.{type}.{modification_string}.sorted.filtered.pat.gz", type = config["ldna"]["type"], modification_string = config["ldna"]["modification_string"], sample=  config["ldna"]["samples"])
        gimme = "ldna/results/gimme/gimme_plots.rds"
        # pepper_aref = expand("ldna/intermediates/{sample}/pepper.out.outfile", sample = config["ldna"]["samples"])
        variants_aref = expand("ldna/intermediates/{sample_or_ref}/snpeff/snpeff_sml.pass.vcf", sample_or_ref = "A.REF")
        variants_per_sample = expand("ldna/intermediates/{sample_or_ref}/snpeff/snpeff_sml.pass.vcf", sample_or_ref = config["ldna"]["samples"])
        for e in list(flatten([mycoplasma, multiqc])):
            final_input.append(e)
        if config["ldna"]["map_to_mycoplasma"] == "yes":
            for e in list(flatten([mycoplasma])):
                final_input.append(e)
        if config["ldna"]["single_condition"] == "yes":
            for e in list(flatten([bedmethanalysis_single_sample])):
                final_input.append(e)
        else:
            for e in list(flatten([bedmethanalysis,dmrs, methylartist,hg38pat])):
                final_input.append(e)
        # if config["aref"]["update_ref_with_tldr"]["response"] == "yes":
        #     if config["aref"]["update_ref_with_tldr"]["per_sample"] == "yes":
        #         for e in list(flatten([variants_per_sample])):
        #             final_input.append(e)
        #     else:
        #         for e in list(flatten([variants_aref])):
        #             final_input.append(e)

    if pipeline == "lrna":
        module lrna:
            snakefile: "lrna/snakefile"
            config: config
        use rule * from lrna as lrna_*
        def lrna_rally():
            deseq = expand("lrna/results/agg/deseq/{counttype}/{contrast}/results_genes.csv", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"], contrast = config["lrna"]["contrasts"])
            enrichment_analysis = "lrna/results/agg/enrichment_analysis/enrichment_analysis_environment.RData"
            enrichment_analysis_repeats = expand("lrna/results/agg/enrichment_analysis_repeats/{counttype}/enrichment_analysis_repeats_environment.RData", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"])
            repeatanalysisplots = expand("lrna/results/agg/repeatanalysis/{counttype}/repeatanalysisplots_environment.RData", alignmenttype = config["lrna"]["alignmenttypes"], counttype = config["lrna"]["counttypes"])
            # genomebrowserplots = expand("lrna/outfiles/genomebrowserplots{alignmenttype}.out", alignmenttype = config["lrna"]["alignmenttypes"])
            qc = [expand("lrna/qc/mycoplasma/mycoplasma{sample}.bam", sample = config["lrna"]["samples"]), "lrna/qc/multiqc_report.html"]
            bw = [expand("lrna/intermediates/{sample}/alignments/{rate}/{sample}.{type}.{modification_string}.F.bw", sample = config["lrna"]["samples"], rate = config["lrna"]["rate"],  type = config["lrna"]["type"], modification_string = config["lrna"]["modification_string"]), expand("lrna/intermediates/{sample}/alignments/{rate}/{sample}.{type}.{modification_string}.R.bw", sample = config["lrna"]["samples"], rate = config["lrna"]["rate"],  type = config["lrna"]["type"], modification_string = config["lrna"]["modification_string"])]
            # bw, enrichment_analysis, enrichment_analysis_repeats
            return list(flatten([deseq, qc, enrichment_analysis, enrichment_analysis_repeats, repeatanalysisplots]))

        for e in lrna_rally():
            final_input.append(e)

    if pipeline == "srna":
        module srna:
            snakefile: "srna/snakefile"
            config: config
        if config["srna"]["library_type"] == "PE":
                use rule * from srna exclude fastp_SE,alignSTAR_SE,featurecounts_genes_SE,featurecounts_genesandrtes_SE as srna_*
        else:
                use rule * from srna exclude fastp_PE,alignSTAR_PE,featurecounts_genes_PE,featurecounts_genesandrtes_PE as srna_*

        if config["srna"]["downsample_for_test"]["response"] == "yes":
            use rule fastp_PE from srna as srna_fastp_PE with:
                input:
                    r1 = "srna/outs/{sample}/subsampled/{sample}_1.subsampled.fastq.gz",
                    r2 = "srna/outs/{sample}/subsampled/{sample}_2.subsampled.fastq.gz"

        samples = config["srna"]["samples"]
        counttypes = config["srna"]["counttypes"]
        contrasts = config["srna"]["contrasts"]
        counttypes = config["srna"]["counttypes"]

        def srna_rally():
            bigwigs = "srna/results/agg/bigwig_plots/bigwigplots_environment.RData"
            mqc_report_file = "srna/qc/multiqc/multiqc_report.html"
            tpm_characterization = expand("srna/results/agg/tpm_sources/{counttype}/characterize_tpm_environment.RData",counttype = config["srna"]["counttypes"])
            if len(config["srna"]["levels"]) > 1:
                deseq = expand("srna/results/agg/deseq/{counttype}/{contrast}/results_genes.csv", counttype = config["srna"]["counttypes"], contrast = config["srna"]["contrasts"])
                enrichment_analysis = "srna/results/agg/enrichment_analysis/enrichment_analysis_environment.RData"
                enrichment_analysis_repeats = expand("srna/results/agg/enrichment_analysis_repeats/{counttype}/enrichment_analysis_repeats_environment.RData", counttype = config["srna"]["counttypes"])
                repeatanalysisplots = expand("srna/results/agg/repeatanalysis/{counttype}/repeatanalysisplots_environment.RData", counttype = config["srna"]["counttypes"])
                return list(flatten([bigwigs, tpm_characterization, deseq, enrichment_analysis, enrichment_analysis_repeats, repeatanalysisplots, mqc_report_file]))
            else:
                return list(flatten([bigwigs,tpm_characterization, mqc_report_file]))

        for e in srna_rally():
            final_input.append(e)
        qc = [expand("srna/qc/mycoplasma/mycoplasma{sample}.sorted.bam", sample = config["srna"]["samples"])]
        if config["srna"]["map_to_mycoplasma"] == "yes":
            final_input.append(qc)
rule all:
    input:
        [            
            final_input            
            ]
    default_target: True


include: "rules.smk"